/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-07-09 03:19:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.exam;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class input_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function check(){\r\n");
      out.write("\t//alert(document.getElementsByName(\"hobby\").length);\r\n");
      out.write("\tif(document.getElementById(\"name\").value==\"\"){\r\n");
      out.write("\t\talert(\"이름을 입력하세요\"); \r\n");
      out.write("\t\treturn; // 돌려주는 값이 없을땐 종료의 의미\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(document.getElementById(\"studentNum\").value==\"\"){\r\n");
      out.write("\t\talert(\"학번을 입력하세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t//JSP : 따로 int, boolean형 두지 않아도 됨 \r\n");
      out.write("\tvar obj = document.getElementsByName(\"hobby\"); // 배열이니까 getElement\"s\"ByName\r\n");
      out.write("\tvar checkCnt =false; //true,false로 둬도 됨\r\n");
      out.write("\tfor(i=0; i<obj.length;i++){\r\n");
      out.write("\t\tif(obj[i].checked){\r\n");
      out.write("\t\t\tcheckCnt=true;\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tif(checkCnt==false){\r\n");
      out.write("\t\talert(\"취미를 선택해주세요.\");\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tform.submit(); // submit -> button으로 바꾼 후 전송 시 ,, name으로 지정했으니 그냥 form.submit\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!--메소드에는 get, post방식이 있다.!!! -->\r\n");
      out.write("<form action=\"Output.jsp\" method=\"post\" name=\"form\"> <!-- ★ get은 기본적인 메소드 : 주소 전부다 주소창에 기입됨-->\r\n");
      out.write(" \r\n");
      out.write("이름 : <input type=\"text\" name=\"name\" id=\"name\"><br>\r\n");
      out.write("학번 : <input type=\"text\" name=\"num\" id=\"studentNum\"><br> \r\n");
      out.write("<br>\r\n");
      out.write("성별 :\r\n");
      out.write(" <input type = \"radio\" name = \"sex\" value = \"man\" checked  id=\"man\">\r\n");
      out.write("<label for=\"man\">남자</label>\r\n");
      out.write("<input type = \"radio\" name = \"sex\" value = \"woman\" id=\"feman\">\r\n");
      out.write("<label for=\"feman\">여자</label> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("전공 : <select name=\"major\"> <!-- size : 보이는 칸의 수, multiple : 다중선택 -->\r\n");
      out.write("<option value=\"국문학과\" selected>국문학과</option>\r\n");
      out.write("<option value=\"영문학과\">영문학과</option>\r\n");
      out.write("<option value=\"수학과\"  >수학과</option>\r\n");
      out.write("<option value=\"정치학과\">정치학과</option>\r\n");
      out.write("<option value=\"체육학과\">체육학과</option>\r\n");
      out.write("</select>\r\n");
      out.write("<br>\r\n");
      out.write("취미<br>\r\n");
      out.write("<input type=\"checkbox\"name=\"hobby\" value=\"운동\">운동\r\n");
      out.write("<input type=\"checkbox\"name=\"hobby\" value=\"운동1\">운동1\r\n");
      out.write("<input type=\"checkbox\"name=\"hobby\" value=\"운동2\">운동2\r\n");
      out.write("<input type=\"checkbox\"name=\"hobby\" value=\"운동3\">운동3\r\n");
      out.write("<input type=\"checkbox\"name=\"hobby\" value=\"운동4\">운동4\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<input type=\"button\" value=\"보내기\" onclick=\"check()\"> <!-- 버튼은 모양만 버튼 ,, ()속 빈공간 : 인자가 없는 함수로 만들기 -->\r\n");
      out.write("<input type=\"reset\" value=\"취소\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
