/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.36
 * Generated at: 2020-07-23 07:03:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.board.BoardVO;
import com.board.BoardDAO;
import java.util.ArrayList;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.board.BoardDAO");
    _jspx_imports_classes.add("com.board.BoardVO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src = \"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");
String pageNum=request.getParameter("pageNum");
if(pageNum==null){
	pageNum="1";
}
int currentPage = Integer.parseInt(pageNum);
int pageSize=5;
int startRow=(currentPage-1)*pageSize+1;
int endRow=currentPage*pageSize;


//검색하기 위한 script
BoardDAO dao = BoardDAO.getInstance();

String field = "",word="";
ArrayList<BoardVO> arr=null;
int count =0;
if(request.getParameter("word")!=null&&!request.getParameter("word").equals("")){
	field=request.getParameter("field");
	word=request.getParameter("word");
	arr = dao.boardList(field,word,startRow,endRow);
	count = dao.boardCount(field,word);
}else{
	arr = dao.boardList(startRow,endRow);
	count = dao.boardCount();
}
String userid = (String)session.getAttribute("userid");


      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("<!-- div: 블럭,, span: 단순히 영역 -->\r\n");
      out.write("\r\n");
      out.write("<div align=\"right\" style=\"margin-right:20px\">\r\n");
      out.write("\t전체 게시글 수 :<span id=\"cntSpan\">");
      out.print(count );
      out.write("</span> <br>\r\n");

	if(userid!=null){

      out.write("\r\n");
      out.write("\t<a href=\"userid\"></a>님 반갑습니다. \r\n");
      out.write("\t<a href=\"../member/logout.jsp\">  로그아웃     </a> <br>\r\n");
      out.write("\t<a href=\"writeForm.jsp\">글쓰기</a>\r\n");
 
}	

      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table class=\"table table-striped\">\r\n");
      out.write("<thead class=\"thead-dark\">\r\n");
      out.write("<tr>\r\n");
      out.write("\t<th scope=\"col\">번호</th>\r\n");
      out.write("\t<th scope=\"col\">제목</th>\r\n");
      out.write("\t<th scope=\"col\">작성자</th>\r\n");
      out.write("\t<th scope=\"col\">작성일</th>\r\n");
      out.write("\t<th scope=\"col\">조회수</th>\r\n");
      out.write("\t<th scope=\"col\">IP주소</th>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("</thead>\r\n");
      out.write("\r\n");
      out.write("<tbody>\r\n");
      out.write("\t");

	for(BoardVO vo : arr){
		
	
      out.write("\t\t\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t<td>");
      out.print(vo.getNum() );
      out.write("</td> <!-- 밑의 jsp? 물음표 의미 : 기본값 갖고 가겠다~ -->\r\n");
      out.write("\t<td><a href=\"boardView.jsp?num=");
      out.print(vo.getNum() );
      out.write('"');
      out.write('>');
      out.print(vo.getSubject() );
      out.write("</a></td>\r\n");
      out.write("\t<td>");
      out.print(vo.getWriter() );
      out.write("</td> \r\n");
      out.write("\t<td>");
      out.print(vo.getReg_date() );
      out.write("</td> \r\n");
      out.write("\t<td>");
      out.print(vo.getReadcount() );
      out.write("</td>\r\n");
      out.write("\t<td>");
      out.print(vo.getIp() );
      out.write("</td>\t\r\n");
      out.write("\t</tr>\r\n");
 
	} 

      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</tbody>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<br>\r\n");
      out.write("<form action=\"list.jsp\" name=\"search\" method=\"get\">\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t<td align=center>\r\n");
      out.write("\t\t<select name=\"field\" size=1>\r\n");
      out.write("\t\t<option value=\"subject\">제목\r\n");
      out.write("\t\t<option value=\"writer\">작성자\t\t\r\n");
      out.write("\t\t</select>\r\n");
      out.write("\t<input type=\"text\" size=30 name=\"word\">\r\n");
      out.write("\t<input type=\"submit\" value=\"찾기\">\r\n");
      out.write("\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");

	
	if(count>0){
		int pageCount = count/pageSize+(count%pageSize==0?0:1);
		int pageBlock=3;
		int startPage = (int)((currentPage-1)/pageBlock)*pageBlock+1;
		int endPage=startPage+pageBlock-1;
		if(endPage>pageCount){
			endPage = pageCount; 
		}
	
	//이전
	if(startPage>pageBlock){

      out.write("\r\n");
      out.write("\t\t<a href=\"list.jsp?pageNum=");
      out.print(startPage-pageBlock );
      out.write("&field=");
      out.print(field);
      out.write("&word=");
      out.print(word );
      out.write("\" >[이전]</a>\r\n");
 	
	}
		
	
	//for
	for(int i=startPage; i<=endPage;i++){

      out.write("\r\n");
      out.write("\t\t<a href=\"list.jsp?pageNum=");
      out.print(i);
      out.write("&field=");
      out.print(field);
      out.write("&word=");
      out.print(word );
      out.write('"');
      out.write('>');
      out.print(i);
      out.write("</a>\r\n");
 
	}
	
	//다음
	if(endPage<pageCount){

      out.write("\t\r\n");
      out.write("\t\t<a href=\"list.jsp?pageNum=");
      out.print(startPage+pageBlock );
      out.write("&field=");
      out.print(field);
      out.write("&word=");
      out.print(word );
      out.write("\">[다음]</a>\r\n");
	
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
